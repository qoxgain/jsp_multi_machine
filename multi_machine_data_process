"""
解决多机台的jsp调度问题,
一个任务可以分配到多个机台上进行作业加工，时长一样
"""
import collections
import numpy as np
import pandas as pd
from ortools.sat.python import cp_model
import random
import jsp

def data_model_with_para(m1, m2, m3, m4, m5):
    """
    数据模型
    0:上料站
    5:下料站
    """
    jobs_data = []
    x = []
    for i in range(m1):
        t = model.NewIntVar(1, 2, f'x[{i}]')
        x.append(t)
        jobs_data.append([(0, 5), (t, 180), (5, 5)])

    for j in range(m2):
        i = i + 1
        t = model.NewIntVar(1, 2, f'x[{i}]')
        i = i + 1
        k = model.NewIntVar(3, 4, f'x[{i}]')
        x.append(t)
        x.append(k)
        jobs_data.append([(0, 5), (t, 40), (5, 5),
                          (0, 5), (k, 70), (5, 5)])

    for m in range(m3):
        jobs_data.append([(0, 5), (1, 20), (5, 5),
                          (0, 5),(2, 80), (5, 5),
                          (0, 5),(3, 50), (5, 5)])

    for j in range(m4):
        i = i + 1
        t = model.NewIntVar(1, 3, f'x[{i}]')
        i = i + 1
        k = model.NewIntVar(3, 4, f'x[{i}]')
        i = i + 1
        n = model.NewIntVar(1, 2, f'x[{i}]')
        x.append(t)
        x.append(k)
        x.append(n)
        jobs_data.append([(0, 5), (t, 40), (5, 5),
                          (0, 5), (k, 60), (5, 5),
                          (0, 5), (n, 90), (5, 5),
                          (0, 5), (4, 30), (5, 5)])

    for j in range(m5):
        i = i + 1
        t = model.NewIntVar(1, 4, f'x[{i}]')
        i = i + 1
        k = model.NewIntVar(1, 2, f'x[{i}]')
        i = i + 1
        n = model.NewIntVar(3, 4, f'x[{i}]')
        x.append(t)
        x.append(k)
        x.append(n)
        jobs_data.append([(0, 5), (t, 120), (5, 5),
                          (0, 5), (k, 50), (5, 5),
                          (0, 5), (n, 60), (5, 5)])

    return jobs_data, x


def data_model_with_random(material_number):
    """
    数据模型
    0:上料站
    5:下料站
    """
    m1, m2, m3, m4, m5 = material_number
    jobs_data = []
    for i in range(m1):
        jobs_data.append([(random.choice([0, 5]), 5), (random.randint(1,2), 180), (random.choice([0, 5]), 5)])

    for j in range(m2):
        jobs_data.append([(random.choice([0, 5]), 5), (random.randint(1,2), 40), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5), (random.randint(3,4), 70), (random.choice([0, 5]), 5)])

    for m in range(m3):
        jobs_data.append([(random.choice([0, 5]), 5), (1, 20), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5),(2, 80), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5),(3, 50), (random.choice([0, 5]), 5)])

    for j in range(m4):
        jobs_data.append([(random.choice([0, 5]), 5), (random.randint(1,3), 40), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5), (random.randint(3,4), 60), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5), (random.randint(1,2), 90), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5), (4, 30), (random.choice([0, 5]), 5)])

    for j in range(m5):
        jobs_data.append([(random.choice([0, 5]), 5), (random.randint(1,4), 120), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5), (random.randint(1,2), 50), (random.choice([0, 5]), 5),
                          (random.choice([0, 5]), 5), (random.randint(3,4), 60), (random.choice([0, 5]), 5)])
    return jobs_data


def main(material_number, iter):
    score = 1000000000
    data = []
    jobs_data_all = []      # 存所有随机初始化的数据
    for i in range(iter):
        jobs_data = data_model_with_random(material_number)
        if jobs_data in jobs_data_all:
            continue
        result = jsp.jsp_process(jobs_data)
        print(result)
        if result[0] < score:
            score = result[0]
            data = jobs_data
        jobs_data_all.append(jobs_data)

    data_df = pd.DataFrame(data)
    data_df.to_excel('jobs_data.xlsx')
    np.save('jobs_data.npy', data)

    # 把跑出来的结果翻译到文件中
    jobs_data = np.load('jobs_data.npy', allow_pickle=True)
    jobs_data = jobs_data.tolist()
    jsp.jsp_process(jobs_data, result_compare=False)


if __name__ == '__main__':
    material = [56,84,59,40,40]
    iter = 1000
    main(material, iter)
